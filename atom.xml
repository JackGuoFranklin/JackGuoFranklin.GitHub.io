<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JackGuoFranklin</title>
  
  <subtitle>开心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-21T04:56:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JackGuoFranklin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>reactNative开发环境搭建</title>
    <link href="http://yoursite.com/2017/11/21/reactNative/reactNative%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/11/21/reactNative/reactNative开发环境搭建/</id>
    <published>2017-11-21T04:50:50.000Z</published>
    <updated>2017-11-21T04:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>reactNative开发环境搭建</p><p>#(一) 搭建基本环境（必要）</p><p>##1.安装Homebrew</p><p>打开终端，运行以下语句（中间需要输入密码）进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>可通过如下语句查看安装是否成功以及安装的Homebrew版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure><p>正常情况下均可安装成功，若出现网络问题安装失败，则运行如下语句清理后再重新安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br><span class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><p>##2. 使用Homebrew来安装Node.js<br>使用brew安装node.js</p><p>终端运行语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>查看安装是否成功以及安装的node.js版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>##3. 安装React Native的命令行工具（react-native-cli）</p><p>React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p><p>终端运行语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g react-native-cli</span><br></pre></td></tr></table></figure><p>若出现错误（可能由于权限不足），则实用以下语句进行安装：</p><p>1<br>sudo npm install -g react-native-cli<br>由于国内网络问题，可以将npm仓库替换为国内镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//将npm仓库替换为国内镜像：</span><br><span class="line">npm config set registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p>#(二) 推荐安装的工具</p><p>##1. Watchman<br>Watchman是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。</p><p>终端运行语句安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install watchman</span><br></pre></td></tr></table></figure><p>查看安装是否成功以及安装的watchman版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watchman -v</span><br></pre></td></tr></table></figure><p>##2. Flow<br>Flow是一个静态的JS类型检查工具，可方便找出代码中可能存在的类型错误。<br>译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。</p><p>终端运行语句安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install flow</span><br></pre></td></tr></table></figure><p>查看安装是否成功以及安装的flow版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flow --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;reactNative开发环境搭建&lt;/p&gt;
&lt;p&gt;#(一) 搭建基本环境（必要）&lt;/p&gt;
&lt;p&gt;##1.安装Homebrew&lt;/p&gt;
&lt;p&gt;打开终端，运行以下语句（中间需要输入密码）进行安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="reactNative" scheme="http://yoursite.com/categories/reactNative/"/>
    
    
      <category term="reactNative" scheme="http://yoursite.com/tags/reactNative/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/21/hello-world/"/>
    <id>http://yoursite.com/2017/11/21/hello-world/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VR 书籍</title>
    <link href="http://yoursite.com/2017/11/21/VR/webgl%E5%92%8Cthree/"/>
    <id>http://yoursite.com/2017/11/21/VR/webgl和three/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>#WebGL和Three.js</p><p>1</p><p>github<a href="https://github.com/mrdoob/three.js/" target="_blank" rel="noopener">Three.js</a></p><p><a href="http://threejs.org/" target="_blank" rel="noopener">threejs.org</a></p><p>2</p><p><a href="http://learningthreejs.com" target="_blank" rel="noopener">Learning Three.js</a></p><p>3</p><p>WebGL编程指南<br>百度网盘</p><p>4</p><p>Three.js Inspector</p><p>Chrome 插件</p><p>5</p><p><a href="http://www.ituring.com.cn/article/58552?utm_source=qdan.me#/" target="_blank" rel="noopener">Three.js入门指南</a></p><p>6</p><p><a href="http://blog.csdn.net/wangyi_lin/article/details/7384191?utm_source=qdan.me#/" target="_blank" rel="noopener">关于怎样使用three.js的小教程</a></p><p>7</p><p><a href="http://void.hi-res.net/" target="_blank" rel="noopener">各种案例</a></p><p>8</p><p><a href="http://www.smashinglabs.pl/three-js-tetris-tutorial" target="_blank" rel="noopener">three-js-tetris-tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#WebGL和Three.js&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;github&lt;a href=&quot;https://github.com/mrdoob/three.js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Three.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="VR" scheme="http://yoursite.com/categories/VR/"/>
    
    
      <category term="VR" scheme="http://yoursite.com/tags/VR/"/>
    
  </entry>
  
  <entry>
    <title>计算机书籍</title>
    <link href="http://yoursite.com/2017/11/21/book/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B9%A6%E7%B1%8D%E5%B8%B8%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/21/book/计算机书籍常用/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.代码大全</p><p>2.程序员修炼之道</p><p>3.设计模式</p><p>4.重构：改善既有代码的设计</p><p>5.哥德尔、艾舍尔、巴赫书：集异璧之大成</p><p>6.代码整洁之道</p><p>7.修改代码的艺术</p><p>8.Unix编程艺术<br>It is useful regardless operating system you use. – J.F. Sebastian<br>不管你使用什么操作系统，这本书都很有用。 – J.F. Sebastian</p><p>《代码大全》教你如何正确编程；《人月神话》教你如何正确管理；《设计模式》教你如何正确设计……</p><p>9.算法导论</p><p>10.人月神话</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.代码大全&lt;/p&gt;
&lt;p&gt;2.程序员修炼之道&lt;/p&gt;
&lt;p&gt;3.设计模式&lt;/p&gt;
&lt;p&gt;4.重构：改善既有代码的设计&lt;/p&gt;
&lt;p&gt;5.哥德尔、艾舍尔、巴赫书：集异璧之大成&lt;/p&gt;
&lt;p&gt;6.代码整洁之道&lt;/p&gt;
&lt;p&gt;7.修改代码的艺术&lt;/p&gt;
&lt;p&gt;8.Unix编程艺
      
    
    </summary>
    
      <category term="计算机" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计算机" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>cherome使用技巧</title>
    <link href="http://yoursite.com/2017/11/21/chrome/Chrome%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/11/21/chrome/Chrome使用技巧/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cherome-使用技巧"><a href="#cherome-使用技巧" class="headerlink" title="cherome 使用技巧"></a>cherome 使用技巧</h3><p>Infinity(必备)：善心悦目的背景，而且可以自定图标。（鼠标滚轮可以翻页）</p><p>AdBlock（必备）：到现在帮我屏蔽了上万条广告</p><p>视频广告终结者：在不办任何会员的情况下，基本上所有视频都没广告了，</p><p>Google翻译：一键翻译</p><p>Tab Sync</p><p>有时5点钟流逝的太早。也许你正沦陷于一个很重要的工作项目，或者你正娱乐到一半，但现在是时候出发了。一种解决方案是保存所有打开的标签为书签，打开书签同步，回家后一个一个的打开。或者你可以安装Tab Sync。顾名思义，这个工具同步你所有已打开的标签页。只要按一下按钮，你就可以安心出发。</p><p>Tab Menu</p><p>这对于经常同时打开超过10个标签的人来说极其方便，并且你打开的标签越多，你就更多的使用这个扩展。轻松的在一个下拉菜单中完成诸如选择、关闭、重新排列、查找等更多功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;cherome-使用技巧&quot;&gt;&lt;a href=&quot;#cherome-使用技巧&quot; class=&quot;headerlink&quot; title=&quot;cherome 使用技巧&quot;&gt;&lt;/a&gt;cherome 使用技巧&lt;/h3&gt;&lt;p&gt;Infinity(必备)：善心悦目的背景，而且可以自定图标。
      
    
    </summary>
    
      <category term="chrome" scheme="http://yoursite.com/categories/chrome/"/>
    
    
      <category term="cherome" scheme="http://yoursite.com/tags/cherome/"/>
    
  </entry>
  
  <entry>
    <title>github插件1</title>
    <link href="http://yoursite.com/2017/11/21/github/github%E6%8F%92%E4%BB%B61/"/>
    <id>http://yoursite.com/2017/11/21/github/github插件1/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>github 插件</p><p>1 Octotree：你的 GitHub 文档库</p><p>　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的 GitHub 仓库，简单直观的同时，也方便你进行文件之间的跳转操作。<br>　　<br><img src="/image/imagegithub1.jpg" alt="image1"></p><p>2 GitHub Awesome Complete：属于 GitHub 的 「Alfred」</p><p>　在 GitHub 搜索仓库或者项目的时候，你会怎么做？相信大部分人的步骤都是一样的：</p><p>　　在搜索框输入关键字后按回车键</p><p>　　在搜索结果中找到相应结果，点击进入相应页面</p><p>　　有没有更简单快捷的操作方法？答案是 GitHub Awesome Complete 这款 Chrome 插件。这款插件能够让你在 GitHub 中输入关键字之后通过弹窗动态显示相应的搜索结果，你所需要做的，只是点击即可。</p><p><img src="/image/imagegithub2.gif" alt="image2"></p><p>3 　除了以上两款 GitHub 相关的插件，这里我还要介绍一下 Octo Mate 这款能够提升你的 GitHub 体验的小工具。对于这款插件，主要功能有以下四点：</p><p>　　一键下载文件：GitHub 可以让你很方便的以 .zip 格式下载所有文件，但如果只需要下载一个文件，非常麻烦。使用 Octo Mate 后只需要点击文件图标即可下载。</p><p>　　一键打开项目的 Github Pages</p><p>　　显示仓库大小</p><p>　　显示未读消息数</p><p>　　相信这样一款插件一定能让你在使用 GitHub 的时候更加高效。</p><p><img src="/image/imagegithub3.jpg" alt="image3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;github 插件&lt;/p&gt;
&lt;p&gt;1 Octotree：你的 GitHub 文档库&lt;/p&gt;
&lt;p&gt;　　GitHub 现有的目录层级形式，在查看来自不同层级文件夹的文件的时候，显得似乎不是很方便，Octotree 这款 Chrome 插件能够让你通过文档库的方式管理、查看你的
      
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>github插件2</title>
    <link href="http://yoursite.com/2017/11/21/github/github%E6%8F%92%E4%BB%B62/"/>
    <id>http://yoursite.com/2017/11/21/github/github插件2/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 SourceGraph</p><p>Sourcegraph Chrome 扩展允许你像使用一个很好的 IDE 那样浏览源代码。它为 Github 上的代码添加了即时文档和类型提示，并为每一个标识符添加了跳转到定义处的链接。</p><p><img src="/image/imagegithub4.jpg" alt="image4"></p><p>2 Zenhub</p><p>ZenHub 是一个 Github 的本地项目管理工具，可以无缝的集成。</p><p><img src="/image/imagegithub5.jpg" alt="image5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 SourceGraph&lt;/p&gt;
&lt;p&gt;Sourcegraph Chrome 扩展允许你像使用一个很好的 IDE 那样浏览源代码。它为 Github 上的代码添加了即时文档和类型提示，并为每一个标识符添加了跳转到定义处的链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>github插件3</title>
    <link href="http://yoursite.com/2017/11/21/github/github%E6%8F%92%E4%BB%B63/"/>
    <id>http://yoursite.com/2017/11/21/github/github插件3/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>GitHub Cue<br><img src="/image/imagegithub6.jpg" alt="image1"><br>GitHub-Cue 会根据用户正在查看的库给出一些建议或者推荐一些你可能感兴趣的库。</li></ol><p>2.Github Highlight Selected<br><img src="/image/imagegithub7.jpg" alt="image1"><br>当你在 Github 源代码中选中一个词的时候，这个插件会为你高亮显示这个文件中其他相同的词。</p><p>3.GH Diff Highlight<br><img src="/image/imagegithub8.jpg" alt="image1"><br>允许你像使用一个很好的 IDE 那样浏览源代码。它为 Github 上的代码添加了即时文档和类型提示，并为每一个标识符添加了跳转到定义处的链接。除此之外，它还会高亮显示源代码之间的差异。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;GitHub Cue&lt;br&gt;&lt;img src=&quot;/image/imagegithub6.jpg&quot; alt=&quot;image1&quot;&gt;&lt;br&gt;GitHub-Cue 会根据用户正在查看的库给出一些建议或者推荐一些你可能感兴趣的库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.Githu
      
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/categories/github/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>创建Git仓库（git@oschina&amp;sourceTree）</title>
    <link href="http://yoursite.com/2017/11/21/github/%E5%88%9B%E5%BB%BAGit%E4%BB%93%E5%BA%93osChina/"/>
    <id>http://yoursite.com/2017/11/21/github/创建Git仓库osChina/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建Git仓库（git@oschina&amp;sourceTree）</p><p>1.创建远程仓库</p><p>进入<a href="https://git.oschina.net/点击＋号，创建新项目" target="_blank" rel="noopener">https://git.oschina.net/点击＋号，创建新项目</a></p><p>2.部署公钥（可以暂时不用公钥的）</p><p>在项目界面，管理－》部署公钥－》添加公钥，按照git@oschina上面的步骤，一步步生成公钥并添加到项目中。</p><p>3.将远程仓库与本地仓库关联起来（也是最关键的一步）</p><p>（1）复制远程仓库的git地址。</p><p>（2）打开sourceTree，依次点击：新仓库－》从URL克隆－》将远程仓库的地址粘贴到“源URL”，目标路径选择自己要存放的位置（路径A）（一定得是一个空的文件夹，否则会报错）－》克隆</p><p>4.在路径A下创建工程，或者将原来就存在的工程放在路径A下面。</p><p>5.打开sourceTree，查看是否检测到文件变动。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建Git仓库（git@oschina&amp;amp;sourceTree）&lt;/p&gt;
&lt;p&gt;1.创建远程仓库&lt;/p&gt;
&lt;p&gt;进入&lt;a href=&quot;https://git.oschina.net/点击＋号，创建新项目&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="git@osChina" scheme="http://yoursite.com/tags/git-osChina/"/>
    
      <category term="sourceTree" scheme="http://yoursite.com/tags/sourceTree/"/>
    
  </entry>
  
  <entry>
    <title>ios cocoapods 安装第三方库错误</title>
    <link href="http://yoursite.com/2017/11/21/ios/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2017/11/21/ios/错误日志/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>#错误日志</p><p>###The dependency <code>***</code> is not used in any concrete target.<br>在Podfile文件中必须指明</p><p>target “**” do </p><p>pod “<em>**</em>“</p><p>end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#错误日志&lt;/p&gt;
&lt;p&gt;###The dependency &lt;code&gt;***&lt;/code&gt; is not used in any concrete target.&lt;br&gt;在Podfile文件中必须指明&lt;/p&gt;
&lt;p&gt;target “**” do &lt;/p&gt;
&lt;p&gt;pod 
      
    
    </summary>
    
      <category term="ios cocoapods" scheme="http://yoursite.com/categories/ios-cocoapods/"/>
    
    
      <category term="cocoapods" scheme="http://yoursite.com/tags/cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>mysql 更改密码</title>
    <link href="http://yoursite.com/2017/11/21/mysql/mysql%E6%9B%B4%E6%94%B9%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2017/11/21/mysql/mysql更改密码/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>mysql 更改密码<br>此时我们在命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>命令会提示没有commod not found，我们还需要将mysql加入系统环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1).进入/usr/local/mysql/bin,查看此目录下是否有mysql，见pic6。</span><br><span class="line">(2).执行vim ~/.bash_profile</span><br><span class="line">    在该文件中添加mysql/bin的目录，见pic7：</span><br><span class="line">    PATH=$PATH:/usr/local/mysql/bin</span><br><span class="line">添加完成后，按esc，然后输入wq保存。</span><br><span class="line">最后在命令行输入source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>现在你就可以通过mysql -u root -p登录mysql了，会让你输入密码，就是提示的默认密码<br>登录成功后，你可以通过下面的命令修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mysql 更改密码&lt;br&gt;此时我们在命令行输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>node.js 版本升级</title>
    <link href="http://yoursite.com/2017/11/21/nodejs/node.js%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>http://yoursite.com/2017/11/21/nodejs/node.js 版本升级/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>一行命令搞定node.js 版本升级</p><p>首先安装n模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><p>第二步：<br>升级node.js到最新稳定版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n stable</span><br></pre></td></tr></table></figure><p>n后面也可以跟随版本号比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n v0.10.26</span><br><span class="line">或</span><br><span class="line">n 0.10.26</span><br></pre></td></tr></table></figure><p>另外分享几个npm的常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm -v          #显示版本，检查npm 是否正确安装。</span><br><span class="line"></span><br><span class="line">npm install express   #安装express模块</span><br><span class="line"></span><br><span class="line">npm install -g express  #全局安装express模块</span><br><span class="line"></span><br><span class="line">npm list         #列出已安装模块</span><br><span class="line"></span><br><span class="line">npm show express     #显示模块详情</span><br><span class="line"></span><br><span class="line">npm update        #升级当前目录下的项目的所有模块</span><br><span class="line"></span><br><span class="line">npm update express    #升级当前目录下的项目的指定模块</span><br><span class="line"></span><br><span class="line">npm update -g express  #升级全局安装的express模块</span><br><span class="line"></span><br><span class="line">npm uninstall express  #删除指定的模块</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一行命令搞定node.js 版本升级&lt;/p&gt;
&lt;p&gt;首先安装n模块：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>python Django简介</title>
    <link href="http://yoursite.com/2017/11/21/python/Django%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2017/11/21/python/Django简介/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django 简介<br>让我们一览 Django 全貌<br>urls.py<br>网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。</p><p>views.py<br>处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页。</p><p>models.py<br>与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用。</p><p>forms.py<br>表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用。</p><p>templates 文件夹</p><p>views.py 中的函数渲染templates中的Html模板，得到动态内容的网页，当然可以用缓存来提高速度。</p><p>admin.py<br>后台，可以用很少量的代码就拥有一个强大的后台。</p><p>settings.py<br>Django 的设置，配置文件，比如 DEBUG 的开关，静态文件的位置等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Django 简介&lt;br&gt;让我们一览 Django 全貌&lt;br&gt;urls.py&lt;br&gt;网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。&lt;/p&gt;
&lt;p&gt;views.py&lt;br&gt;处理用户发出的请求，从urls.py中对应过来,
      
    
    </summary>
    
      <category term="python django" scheme="http://yoursite.com/categories/python-django/"/>
    
    
      <category term="python django" scheme="http://yoursite.com/tags/python-django/"/>
    
  </entry>
  
  <entry>
    <title>python django新建项目</title>
    <link href="http://yoursite.com/2017/11/21/python/%E5%BD%93%E6%8F%90%E7%A4%BA%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/21/python/当提示端口被占用/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 新建一个 django project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject project-name</span><br></pre></td></tr></table></figure><p>一个 project 为一个项目，project-name 项目名称，改成你自己的，要符合Python 的变量命名规则（以下划线或字母开头）</p><p>2 新建 app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp app-name</span><br><span class="line">或 django-admin.py startapp app-name</span><br></pre></td></tr></table></figure><p>一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。</p><p>3 同步数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python manage.py syncdb</span><br><span class="line"> </span><br><span class="line">注意：Django 1.7.1及以上的版本需要用以下命令</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>这种方法可以创建表，当你在models.py中新增了类时，运行它就可以自动在数据库中创建表了，不用手动创建。</p><p>备注：对已有的 models 进行修改，Django 1.7之前的版本的Django都是无法自动更改表结构的，不过有第三方工具 south,详见 Django 数据库迁移 一节。</p><p>4 使用开发服务器<br>开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"> </span><br><span class="line"># 当提示端口被占用的时候，可以用其它端口：</span><br><span class="line">python manage.py runserver 8001</span><br><span class="line">python manage.py runserver 9999</span><br><span class="line">（当然也可以kill掉占用端口的进程）</span><br><span class="line"> </span><br><span class="line"># 监听所有可用 ip （电脑可能有一个或多个内网ip，一个或多个外网ip，即有多个ip地址）</span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br><span class="line"># 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器</span><br><span class="line"># 访问对应的 ip加端口，比如 http://172.16.20.2:8000</span><br></pre></td></tr></table></figure><p> 5 清空数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py flush</span><br></pre></td></tr></table></figure><p>此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。</p><p>6  创建超级管理员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line"> </span><br><span class="line"># 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填</span><br><span class="line"> </span><br><span class="line"># 修改 用户密码可以用：</span><br><span class="line">python manage.py changepassword username</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 新建一个 django project&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
      
    
    </summary>
    
      <category term="python django" scheme="http://yoursite.com/categories/python-django/"/>
    
    
      <category term="python django" scheme="http://yoursite.com/tags/python-django/"/>
    
  </entry>
  
  <entry>
    <title>Swift 图片下载</title>
    <link href="http://yoursite.com/2017/11/21/swift/Kingfisher/"/>
    <id>http://yoursite.com/2017/11/21/swift/Kingfisher/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kingfisher</p><p>oc有个非常强大图片缓存处理的库SDWebImage，swift中现在也有个不错的图片处理的库—-Kingfisher</p><p>Kingfisher库下载图片默认是带缓存的</p><p>最简单的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Kingfisher</span><br><span class="line">imageView.kf_setImageWithURL(NSURL(string: &quot;http//www.baidu.com.png&quot;)!)</span><br></pre></td></tr></table></figure><p>配置 https</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在info.plist里加上下面这段</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br><span class="line">去配置一个Dictionary类型的NSAppTransportSecurity 子item是Boolean类型NSAllowsArbitraryLoads value是YES</span><br></pre></td></tr></table></figure><p>添加默认图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testImag.kf_setImageWithURL(NSURL(string: &quot;http://your.png&quot;)!, placeholderImage: UIImage(named: &quot;mrt&quot;))</span><br></pre></td></tr></table></figure><p>默认情况下Kingfisher使用url当做cache(缓存)的key。 不过你也可以自定义这个key 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let URL = NSURL(string: &quot;http://your.png&quot;)!</span><br><span class="line">let resource = Resource(downloadURL: URL, cacheKey: &quot;your_customized_key&quot;)</span><br><span class="line">imageView.kf_setImageWithResource(resource)</span><br></pre></td></tr></table></figure><p>Kingfisher 默认先从内存和硬盘搜 ，如果没找到才去URL down，当然你也可以强制它每次从URL down，忽略缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.kf_setImageWithURL(NSURL(string: &quot;your_image_url&quot;)!, placeholderImage: nil, optionsInfo: [.Options: KingfisherOptions.ForceRefresh])</span><br></pre></td></tr></table></figure><p>下载和缓存系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let downloader = KingfisherManager.sharedManager.downloader</span><br><span class="line"></span><br><span class="line">// 修改超时时间</span><br><span class="line">downloader.downloadTimeout = 5</span><br><span class="line"></span><br><span class="line">let cache = KingfisherManager.sharedManager.cache</span><br><span class="line"></span><br><span class="line">// 设置硬盘最大缓存50M ，默认无限</span><br><span class="line">cache.maxDiskCacheSize = 50 * 1024 * 1024</span><br><span class="line">// 设置硬盘最大保存3天 ， 默认1周</span><br><span class="line">cache.maxCachePeriodInSecond = 60 * 60 * 24 * 3</span><br><span class="line"></span><br><span class="line">// 获取硬盘缓存的大小</span><br><span class="line">cache.cache.calculateDiskCacheSizeWithCompletionHandler &#123; (size) -&gt; () in      </span><br><span class="line">    println(&quot;disk size in bytes: \(size)&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//清理内存缓存</span><br><span class="line">cache.clearMemoryCache()</span><br><span class="line"></span><br><span class="line">// 清理硬盘缓存，这是一个异步的操作</span><br><span class="line">cache.clearDiskCache()</span><br><span class="line"></span><br><span class="line">// 清理过期或大小超过磁盘限制缓存。这是一个异步的操作</span><br><span class="line">cache.cleanExpiredDiskCache()</span><br></pre></td></tr></table></figure><p>回调</p><p>下载完成后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imageView.kf_setImageWithURL(NSURL(string: &quot;your_image_url&quot;)!, </span><br><span class="line">  placeholderImage: nil, </span><br><span class="line">  optionsInfo: nil, </span><br><span class="line">  progressBlock: &#123; (receivedSize, totalSize) -&gt; () in </span><br><span class="line">  println(&quot;Download Progress: \(receivedSize)/\(totalSize)&quot;) &#125;, </span><br><span class="line">  completionHandler: &#123; (image, error, imageURL) -&gt; () in </span><br><span class="line">  println(&quot;Downloaded and set!&quot;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kingfisher&lt;/p&gt;
&lt;p&gt;oc有个非常强大图片缓存处理的库SDWebImage，swift中现在也有个不错的图片处理的库—-Kingfisher&lt;/p&gt;
&lt;p&gt;Kingfisher库下载图片默认是带缓存的&lt;/p&gt;
&lt;p&gt;最简单的使用&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift代理delegate</title>
    <link href="http://yoursite.com/2017/11/21/swift/Swift%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/21/swift/Swift代理/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现代理传值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController,ChangeValueDelegate&#123;</span><br><span class="line">    </span><br><span class="line">    var btn = UIButton()</span><br><span class="line"></span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class="line">        </span><br><span class="line">        btn.setTitle(&quot;Change&quot;, forState:.Normal)</span><br><span class="line">        btn.backgroundColor = UIColor.blueColor()</span><br><span class="line">        btn.frame = CGRect(x: 100, y: 100, width: 100, height: 50)</span><br><span class="line">        btn.addTarget(self, action: #selector(change), forControlEvents: .TouchUpInside)</span><br><span class="line">        self.view.addSubview(btn)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">        // Dispose of any resources that can be recreated.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //    delegate 代理方法</span><br><span class="line">    func changeValue(value: String) &#123;</span><br><span class="line">        </span><br><span class="line">        btn.setTitle(value, forState: .Normal)</span><br><span class="line">        print(&quot;value:\(value)&quot;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //  传值</span><br><span class="line">    func change()&#123;</span><br><span class="line">        </span><br><span class="line">        let vc = ChangeValueViewController()</span><br><span class="line">        vc.delegate = self</span><br><span class="line">        self.navigationController?.pushViewController(vc, animated: true)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protocol ChangeValueDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    func changeValue(value:String)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用代理传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class ChangeValueViewController: UIViewController &#123;</span><br><span class="line">    </span><br><span class="line">    var delegate:ChangeValueDelegate?</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        // Do any additional setup after loading the view.</span><br><span class="line">        self.view.backgroundColor = UIColor.whiteColor()</span><br><span class="line">        </span><br><span class="line">        self.delegate?.changeValue(&quot;ok&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">        // Dispose of any resources that can be recreated.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现代理传值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="delegate" scheme="http://yoursite.com/tags/delegate/"/>
    
  </entry>
  
  <entry>
    <title>swift_ios_开发之UINavigationController的常用属性</title>
    <link href="http://yoursite.com/2017/11/21/swift/Swift_ios_%E5%BC%80%E5%8F%91%E4%B9%8BUINavigationController%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2017/11/21/swift/Swift_ios_开发之UINavigationController的常用属性/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift开发之UINavigationController的常用属性</p><p>1.导航栏是否隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.navigationController?.navigationBar.hidden = false</span><br></pre></td></tr></table></figure><p>2.导航栏的最底部颜色设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//backgroundColor 是最底下的color </span><br><span class="line">self.navigationController?.navigationBar.backgroundColor = UIColor.redColor()</span><br></pre></td></tr></table></figure><p>3.导航栏的表层颜色，即首先看到的颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//barTintColor 是表层颜色</span><br><span class="line">self.navigationController?.navigationBar.barTintColor = UIColor.grayColor()</span><br></pre></td></tr></table></figure><p>4.导航栏中间标题title的颜色，大小，字体设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.navigationController?.navigationBar.titleTextAttributes = [NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName:UIFont(name: &quot;Heiti SC&quot;, size: 24.0)!]</span><br></pre></td></tr></table></figure><p>5.导航栏隐藏左边backitem，即leftbarbuttonitem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//完全隐藏backItem//</span><br><span class="line">self.navigationItem.setHidesBackButton(true, animated: true)</span><br></pre></td></tr></table></figure><p>6.导航栏leftbarbuttonitem的颜色设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swiftself.navigationController?.navigationBar.tintColor = UIColor.whiteColor()</span><br></pre></td></tr></table></figure><p>7.导航栏leftbarbuttonitem的字体，颜色，大小设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSForegroundColorAttributeName:UIColor.blueColor(),NSFontAttributeName: UIFont(name: &quot;Chalkduster&quot;, size: 13)!], forState: UIControlState.Normal)</span><br></pre></td></tr></table></figure><p>8.导航栏重新定义leftbarbuttonitem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//重新定义backItem，将覆盖原来的BackItem.与storyboard中拖入一个item，效果一样。都是覆盖原来的backitem。</span><br><span class="line"></span><br><span class="line">//第一种代码定义方式</span><br><span class="line">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;), animated: true)</span><br><span class="line"></span><br><span class="line">//第二种代码定义方式 </span><br><span class="line">self.navigationItem.leftBarButtonItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Add, target: self, action: &quot;function&quot;)</span><br><span class="line"></span><br><span class="line">//第三种代码定义的方式</span><br><span class="line">self.navigationItem.setLeftBarButtonItem(UIBarButtonItem(title: &quot;&lt;Grandre&quot;, style: UIBarButtonItemStyle.Plain, target: self, action: &quot;function&quot;), animated: true)</span><br></pre></td></tr></table></figure><p>9.导航栏设置成透明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//将导航栏设置成透明</span><br><span class="line">self.navigationController?.navigationBar.setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)</span><br><span class="line">self.navigationController!.navigationBar.shadowImage = UIImage()</span><br><span class="line">self.navigationController?.navigationBar.translucent = true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Swift开发之UINavigationController的常用属性&lt;/p&gt;
&lt;p&gt;1.导航栏是否隐藏&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="UINavigationController" scheme="http://yoursite.com/tags/UINavigationController/"/>
    
  </entry>
  
  <entry>
    <title>swift - 状态栏</title>
    <link href="http://yoursite.com/2017/11/21/swift/Swift%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <id>http://yoursite.com/2017/11/21/swift/Swift状态栏/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>状态栏</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //状态栏高度</span><br><span class="line"> let statusHeight = UIApplication.shared.statusBarFrame.height</span><br><span class="line">//导航栏高度</span><br><span class="line">  let navigationHeight = self.navigationController?.navigationBar.frame.size.height</span><br></pre></td></tr></table></figure><p>Swift - 隐藏状态栏（statusBar）的两种方法</p><p>1，全局设置</p><p>这种方法修改后，整个应用的所有视图都不显示状态栏。</p><p>（1）在 Info.plist 中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;UIViewControllerBasedStatusBarAppearance&lt;/key&gt;</span><br><span class="line">&lt;false/&gt;</span><br></pre></td></tr></table></figure><p>（2）在 General -&gt; Deployment Info 中，将 Hide status bar 勾选。</p><p>2，在视图控制器中单独设置</p><p>这用方法适合于只隐藏部分页面的状态栏。我们在需要隐藏 statusbar 的 ViewController 中添加如下代码即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    //隐藏状态栏</span><br><span class="line">    override var prefersStatusBarHidden: Bool &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;状态栏&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift-UISreen类的屏幕大小</title>
    <link href="http://yoursite.com/2017/11/21/swift/UISreen%E7%B1%BB%E7%9A%84%E5%B1%8F%E5%B9%95%E5%A4%A7%E5%B0%8F/"/>
    <id>http://yoursite.com/2017/11/21/swift/UISreen类的屏幕大小/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取 UISreen类的屏幕大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//获取屏幕大小</span><br><span class="line">var screenBounds:CGRect = UIScreen.mainScreen().bounds</span><br><span class="line">println(screenBounds) //iPhone6输出：（0.0,0.0,375.0,667.0）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取 UISreen类的屏幕大小&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>UIView的常用属性和常用方法总结</title>
    <link href="http://yoursite.com/2017/11/21/swift/UIView%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E5%92%8C%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/21/swift/UIView的常用属性和常用方法/</id>
    <published>2017-11-21T04:12:07.000Z</published>
    <updated>2017-11-21T04:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIView的常用属性和常用方法总结</p><p>1，UIView常用的一些属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">frame：相对父视图的坐标和大小（x,y,w,h）</span><br><span class="line">bounds：相对自身的坐标和大小，所以bounds的x和y永远为0（0,0,w,h）</span><br><span class="line">center：相对父视图的中点坐标</span><br><span class="line">transform：控制视图的放大缩小和旋转</span><br><span class="line">superview：获取父视图</span><br><span class="line">subviews：获取所有子视图</span><br><span class="line">alpha：视图的透明度（0.0-1.0）</span><br><span class="line">tag：视图的标志（Int类型，默认等于0），设置后，可以通过viewWithTag方法拿到这个视图</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>2，UIView的常用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func removeFromSuperview()：将视图从父视图中移除</span><br><span class="line">func insertSubview(view:UIView, atIndex index:Int)：指定一个位置插入一个视图，index越小，视图越往下</span><br><span class="line">func exchangeSubviewAtIndex(index1:Int, withSubviewAtIndex index2:Int)：将index1和index2位置的两个视图互换位置</span><br><span class="line">func addSubview(view:UIView)：添加视图到父视图</span><br><span class="line">func insertSubview(view:UIView,belowSubview siblingSubview:UIView)：在指定视图的下面插入视图</span><br><span class="line">func insertSubview(view:UIVIew,aboveSubview siblingSubview:UIView)：在指定视图上面插入视图</span><br><span class="line">func bringSubviewToFront(view:UIView)：把视图移到最顶层</span><br><span class="line">func sendSubviewToBack(view:UIView)：把视图移到最底层</span><br><span class="line">func viewWithTag(tag:Int)-&gt;UIView?：根据tag值获取视图</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UIView的常用属性和常用方法总结&lt;/p&gt;
&lt;p&gt;1，UIView常用的一些属性如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="swift" scheme="http://yoursite.com/categories/swift/"/>
    
    
      <category term="swift" scheme="http://yoursite.com/tags/swift/"/>
    
  </entry>
  
</feed>
